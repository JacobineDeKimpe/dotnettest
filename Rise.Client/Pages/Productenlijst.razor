@page "/"
@inject Rise.Shared.Products.IProductService ProductService
@using Rise.Client.Components
@using Rise.Shared.Products

<div class="content-wrapper">

    <div class="sidebar">
        <Sidebar />
    </div>

    <div class="main-content">
        <div class="hoofd-filter">
            <div>
                <input id="product-search" @bind="filter" placeholder="Zoek een product" />
                <button @onclick="HandleSearch">Zoek</button>
            </div>
            <div class="button-group-hoofdfilter">
                <!-- De event om te kiezen hoe we de producten krijgen te zien -->
                <i class="@GetToggleIconClass()" @onclick="ToggleView" style="cursor: pointer; font-size: 1.5em;"></i>
                <!-- Zie index.html voor de link om een icon te gebruiken -->
                <span class="vertical-line"></span>
                <button class="@GetButtonClass(false)" @onclick="LoadNonReusableProductsAsync">Uitscannen</button>
                <span class="vertical-line"></span>
                <button class="@GetButtonClass(true)" @onclick="LoadReusableProductsAsync">Uitlenen</button>
                
            </div>
        </div>

        @if (products == null)
        {
            <p>Loading...</p>
        }
        else
        {
            @if (detailsTonen && selectedProduct != null)
            {
                <div class="product-groot">
                    <VergrooteProductkaart Product="selectedProduct" OnClose="HandleCloseProductDetails" />
                </div>
            }
            @if (isTableView) // Dit is om de producten in tabelvorm te zien
            {
                <table class="product-table">
                    <thead>
                        <tr>
                            <th>Naam</th>
                            <th>Hoeveelheid</th>
                            <th>Lokaal</th>
                            <th>Type</th>
                            <th>Barcode</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var product in products)
                        {
                            <ProductRij product=product OnClick="@(() => OnProductClick(product.Id))" />
                        }
                    </tbody>
                </table>
            }
            else //Dit is om de producten via productkaarten te zien
            {
                <div class="product-list">
                @foreach (var product in products)
                {
                    <Productkaart ImageUrl="/images/Stethoscoop.png"
                                  Naam="@product.Name"
                                  Lokaal="@product.Location"
                                  OnClick="@(() => OnProductClick(product.Id))" />

                }
            </div>
            }

        }
    </div>
</div>

@code {
    private string filter = string.Empty;
    private IEnumerable<ProductDto>? products;  
    private IEnumerable<ProductDto>? allProducts; 
    private bool herbruikbaarGeselecteerd;
    private bool detailsTonen = false;
    private ProductDto? selectedProduct;
    private bool isTableView = false; 


    protected override async Task OnInitializedAsync()
    {
        await LoadNonReusableProductsAsync();
    }

    private async Task LoadNonReusableProductsAsync()
    {
        allProducts = await ProductService.GetNotReusableProductsAsync();  
        products = allProducts;  
        herbruikbaarGeselecteerd = false;
    }

    private async Task LoadReusableProductsAsync()
    {
        allProducts = await ProductService.GetReusableProductsAsync();  
        products = allProducts;  
        herbruikbaarGeselecteerd = true;
    }

    private async Task OnProductClick(int id)
    {
        Console.WriteLine(id);
        selectedProduct = await ProductService.GetProductById(id);
        detailsTonen = true;
    }

    private void HandleSearch()
    {
        if (!string.IsNullOrWhiteSpace(filter))
        {
            products = allProducts?.Where(p =>
                p.Name.Contains(filter, StringComparison.OrdinalIgnoreCase) ||
                p.Description.Contains(filter, StringComparison.OrdinalIgnoreCase)).ToList();
        }
        else
        {
            products = allProducts;
        }
    }

    private void HandleCloseProductDetails()
    {
        detailsTonen = false;  
        selectedProduct = null;
    }

    private string GetButtonClass(bool isHerbruikbaar)
    {
        return herbruikbaarGeselecteerd == isHerbruikbaar
            ? "button-selected"
            : "button-unselected";
    }


    private string GetViewType()
    {
        return isTableView ? "Kaarten" : "Tabel";
    }

    private void ToggleView()
    {
        isTableView = !isTableView;
    }

    // Hiermee krijgen we terug welk icoontje we gebruiken
    private string GetToggleIconClass()
        {
            return isTableView ? "fas fa-th-large" : "fas fa-list";
        }
}

<style>

    .content-wrapper {
        display: flex;
        background-color: white;
    }

    .sidebar {
        width: 250px;
        padding: 20px;
        box-sizing: border-box;
    }

    .main-content {
        flex-grow: 1;
        padding: 20px;
        box-sizing: border-box;
    }

    .product-list {
        display: flex;
        flex-wrap: wrap;
        justify-content: flex-start;
        gap: 20px;
    }

    .product-card {
        flex-basis: calc(33.33% - 20px);
        box-sizing: border-box;
        margin-bottom: 20px;
        border: 1px solid black;
        padding: 20px;
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .product-image {
        width: 200px;
        height: auto;
    }

    .product-details {
        text-align: center;
    }

    .hoofd-filter {
        display: flex;
        align-items: center;
        justify-content: space-between;
        margin-top: 40px;
        margin-bottom: 40px;
        width: 100%;
    }

        .hoofd-filter button {
            padding: 10px 20px;
            border-radius: 4px;
            cursor: pointer;
        }

    .button-selected {
        background-color: black;
        color: white;
        border: none;
    }

    .button-unselected {
        background-color: white;
        color: black;
        border: 2px solid black;
    }

        .button-unselected:hover {
            background-color: #f1f1f1;
        }

    .vertical-line {
        width: 2px;
        height: 30px;
        background-color: #000;
        margin: 0 10px;
    }

    .button-group-hoofdfilter {
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .product-table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
    }

    .product-table th, .product-table td {
        border: 1px solid #ddd;
        padding: 8px;
        text-align: left;
    }

    .product-table th {
        background-color: #343a40;
        color: white;
        font-weight: bold;
    }
</style>
